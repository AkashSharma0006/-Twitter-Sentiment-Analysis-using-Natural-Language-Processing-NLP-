# -*- coding: utf-8 -*-
"""Twitter Sentiment Analysis using ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tblhBlHEJ91nl9wlizMPeKxS3RJZWddd
"""

! pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# !pip install kagglehub

# import kagglehub

# # Replace with your dataset name from Kaggle URL
# path = kagglehub.dataset_download("username/dataset-name")

# print("Dataset downloaded at:", path)

# # Example to load CSV
# import pandas as pd
# df = pd.read_csv(f"{path}/filename.csv")
# df.head()

# Api to fetch the dataset from kaggle


!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Now download dataset
!kaggle datasets download -d kazanova/sentiment140

# Step 4: Unzip
import zipfile
with zipfile.ZipFile("sentiment140.zip", "r") as zip_ref:
    zip_ref.extractall("sentiment140_data")

# Step 5: Load CSV
import pandas as pd
df = pd.read_csv("sentiment140_data/training.1600000.processed.noemoticon.csv", encoding='latin-1', header=None)
df.columns = ['target', 'id', 'date', 'flag', 'user', 'text']
df.head()

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

df.isnull().sum()

df['target'].value_counts()

df.shape

df.isnull().sum()

# checking the distribution of target column
df['target'].value_counts()

"""# Convert the target "4" to "1"."""

df.replace({'target':{4:1}},inplace = True)

# checking the distribution of target column
df['target'].value_counts()

"""0 --> Negative Tweet

1 -- > Positive Tweet

**Stemming**

Stemming is the process of reducing a word to its root word.

example actor,actress,acting = act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)

  return stemmed_content

df['stemmed_content'] = df['text'].apply(stemming)

df.head()

df['stemmed_content']

print(df['target'])

# separating the data and label
X = df['stemmed_content'].values
Y = df['target'].values

print(X)

print(Y)

# Splitting the data to training data and test data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,stratify = Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)

print(X_test)

# converting the textual data to numerical data
vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""Logistic Regression"""

model = LogisticRegression(max_iter = 1000)

model.fit(X_train,Y_train)

"""Model Evaluation"""

# accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)

print("Accuracy score on the training data :",training_data_accuracy)

# accuracy score on the testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test,X_test_prediction)

print("Accuracy score on the testing data :",test_data_accuracy)

"""Saving the trained model"""

import pickle

filename = 'trained_model.pkl'
pickle.dump(model,open(filename,'wb'))

"""Using the saved model for future predictions"""

# loading the saved model
loaded_model = pickle.load(open('/content/trained_model.pkl','rb'))

X_new = X_test[200]
print(Y_test[200])

prediction = loaded_model.predict(X_new)
print(prediction)

if (prediction[0] == 0):
  print('Negative Tweet')

else:
  print('Positive Tweet')

X_new = X_test[3]
print(Y_test[3])

prediction = loaded_model.predict(X_new)
print(prediction)

if (prediction[0] == 0):
  print('Negative Tweet')

else:
  print('Positive Tweet')







